"""init

Revision ID: 2d7ddf8c34ca
Revises: 
Create Date: 2023-12-31 09:19:10.234196

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '2d7ddf8c34ca'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    func_ddl = """
        CREATE FUNCTION public.refresh_updated_at()
            RETURNS TRIGGER
            LANGUAGE plpgsql NOT LEAKPROOF AS
            $BODY$
                BEGIN
                   NEW.updated_at := now();
                    RETURN NEW;
                END
            $BODY$;
    """
    op.execute(func_ddl)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('query',
                    sa.Column('region_id', sa.Integer(), nullable=True),
                    sa.Column('category_id', sa.Integer(), nullable=True),
                    sa.Column('query', sa.String(), nullable=True),
                    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('region_id', 'category_id', 'query', name='uc_query')
                    )
    op.create_table('stat',
                    sa.Column('query_id', sa.UUID(), nullable=False),
                    sa.Column('timestamp', sa.Numeric(precision=18, scale=6), nullable=True),
                    sa.Column('value', sa.Integer(), nullable=False),
                    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
                    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
                    sa.ForeignKeyConstraint(['query_id'], ['query.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    # ### end Alembic commands ###

    for table_name in ('query', 'stat'):
        trig_ddl = f"""
            CREATE TRIGGER tr_{table_name}_updated_at BEFORE UPDATE
            ON {table_name}
            FOR EACH ROW EXECUTE PROCEDURE
            refresh_updated_at();
        """
        op.execute(trig_ddl)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('stat')
    op.drop_table('query')
    # ### end Alembic commands ###
    func_ddl = "DROP FUNCTION IF EXISTS public.refresh_updated_at"
    op.execute(func_ddl)
